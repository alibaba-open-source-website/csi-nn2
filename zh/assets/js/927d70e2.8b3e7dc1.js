"use strict";(self.webpackChunkcsi_nn_2=self.webpackChunkcsi_nn_2||[]).push([[1045],{2190:e=>{e.exports=JSON.parse('{"blogPosts":[{"id":"RVM example","metadata":{"permalink":"/zh/blog/RVM example","editUrl":"https://github.com/alibaba-open-source-website/easyexcel/tree/main/blog/2023-02-01-rvm-example/index.md","source":"@site/blog/2023-02-01-rvm-example/index.md","title":"RISC-V matrix extension example","description":"In order to enhance the AI inference ability of the Xuantie processor, T-Head propose a matrix extension Instruction set. The following is an example of AI inference introduced through the T-Head open source AI deployment package.","date":"2023-02-01T00:00:00.000Z","formattedDate":"2023\u5e742\u67081\u65e5","tags":[{"label":"matrix extension","permalink":"/zh/blog/tags/matrix-extension"},{"label":"example","permalink":"/zh/blog/tags/example"}],"readingTime":4.405,"hasTruncateMarker":false,"authors":[{"name":"Wengan Shao","title":"Engineer @ T-Head","url":"https://github.com/shaowg","imageURL":"https://github.com/shaowg.png","key":"shaowg"}],"frontMatter":{"slug":"RVM example","title":"RISC-V matrix extension example","authors":"shaowg","tags":["matrix extension","example"]},"nextItem":{"title":"How to Deploy a Neural Network on TH1520","permalink":"/zh/blog/deploy on th1520"}},"content":"In order to enhance the AI inference ability of the Xuantie processor, T-Head propose a matrix extension Instruction set. The following is an example of AI inference introduced through the T-Head open source AI deployment package.\\n\\n## 1 docker\\nPull the image hhb:2.1-matrix that supports matrix extension from [docker hub](https://hub.docker.com/), start a container, and open a terminal in interactive mode in the container:\\n```shell\\ndocker pull hhb4tools/hhb:2.1-matrix\\ndocker run -itd --name=your.hhb2.1-matrix -p 22 -v /your_mount_dir/:/mnt \\"hhb4tools/hhb:2.1-matrix\\"\\ndocker exec -it your.hhb2.1-matrix /bin/bash\\n```\\nAfter entering container, you can use the hhb --version command to confirm:\\n```bash\\nroot@c14249f8243c:/# hhb --version\\nHHB version: 2.1.x-matrix, build 20230131\\n```\\ndocker installation guide\uff1a\\n\\n## 2 Model deployment\\nTake the deployment of [MobileNet](https://github.com/shicai/MobileNet-Caffe) as an example, in /home/rvm_caffe_mv1_int8, there is already a complete Makefile script, execute the  `make`  command to convert the model into the required sample program, which can be executed on RISC-V architecture chips that support matrix extension.\\n```shell\\ncd /home/rvm_caffe_mv1_int8\\nmake\\n```\\nThe key steps in the model deployment process are described below:\\n\\n### 2.1 Model compilation\\nHHB is an offline AI model compilation and optimization tool. Executing the following commands can quantize the original model, optimize operators such as operator fusion, and generate a C code model with high execution efficiency on the target chip.\\n```bash\\nhhb -C --calibrate-dataset ./cat.jpg --model-file ./mobilenetv1.prototxt ./mobilenetv1.caffemodel --data-scale 0.017 --data-mean \'104 117 124\' --output . --board rvm --quantization-scheme=\\"int8_asym_w_sym\\" --pixel-format BGR --fuse-conv-relu --channel-quantization --target-layout NHWC\\n```\\nThe model compilation options are described as:\\n\\n- -C \uff1aspecifies to execute the main command until C code is generated.\\n- --calibrate-dataset\uff1aspecifies the calibration image used for quantization.\\n- --model-file \uff1aspecifies a MobileNet model downloaded to the current directory. A Caffe model is divided into two files. The files following the option are not sequence-sensitive.\\n- --data-mean \uff1aspecifies a mean.\\n- --data-scale \uff1aspecifies a scale.\\n- --output \uff1aspecifies the current directory as the path to store files that you need to generate.\\n- --board \uff1aspecifies the platform as the destination platform.\\n- --quantization-scheme \uff1aspecifies a quantization scheme. \\n- --pixel-format\uff1aspecifies the input image format required by the model, the default is RGB, and the BGR image needs to be set to BGR when the model is trained.\\n- --fuse-conv-relu\uff1aspecifies relu fuse to convolution layer.\\n- -channel-quantization\uff1aspecifies weight channel quantization.\\n- --target-layout NHWC\uff1aspecifies the tensor layout.\\n\\nAfter the command is executed, multiple files such as main.c and model.c will be generated in the current directory:\\n\\n- data.0.tensor\uff1a cat.png preprocessed tensor by decoding.\\n- data.0.bin\uff1adata.0.tensor binary data.\\n- main.c\uff1athe reference entry to the sample program.\\n- model.c\uff1aa model structure file that describes the model structure.\\n- hhb.bm\uff1aHHB format model file.\\n- model.params\uff1athe weights converted to int8.\\n- io.c\uff1athe helper function for reading and writing files.\\n- io.h\uff1athe declaration of the helper function for reading and writing files.\\n- process.c\uff1athe image preprocessing function.\\n- process.h\uff1athe declaration of the image preprocessing function.\\n\\n### 2.2 SHL library\\nSHL is a set of neural network library API for Xuantie CPU platform, and provides a series of optimized binary libraries. SHL supports convolutional layer-focused optimization by matrix extension, . In this example, the prebuilt inference library has been placed in the /home/install_nn2 directory, and the source code can also be downloaded and rebuild by the following steps.\\n```shell\\ngit clone -b matrix https://github.com/T-head-Semi/csi-nn2.git\\ncd csi-nn2\\nmake nn2_rvm\\nmake install\\n```\\n\\n### 2.2 Executable program\\nAfter hhb completes the code generation, execute the following compilation command to link the rvm high-performance library and generate the c_runtime program in the current directory:\\n```bash\\nriscv64-unknown-linux-gnu-gcc -O2 -g3 -march=rv64gcv_zfh_xtheadc -mabi=lp64d -I/home -I/home/install_nn2/include -I/home/decode/install/include -o c_runtime  main.c model.c io.c process.c -L/home/install_nn2/lib -L/home/decode/install/lib/rv -ljpeg -lpng -lz -lstdc++ -lshl_rvm -lm -static -Wl,--gc-sections\\n```\\nThe compilation option is described as follows:\\n\\n-  -O2 -g3: specifies the optimization option and debug-level.\\n- -march: specifies the architecture option for RISC-V matrix extension chip.\\n- -mabi: specifies the application binary interface (ABI) option for RISC-V matrix extension chip.\\n- -I: specifies the location of the header file that needs to be used during compilation.\\n- main.c model.c io.c process.c: the source file that you need to use for compilation.\\n- -L: specifies the path to store the specified library.\\n- -ljpeg: links to a JPEG decoding library.\\n- -lpng: links to a PNG decoding library.\\n- -lz: links to a zlib.\\n- -lstdc++: links to a standard C++ library.\\n- -lshl_rvm: links to an optimized version library of rvm in SHL.\\n- -lm: links to a standard math library.\\n- -static: a static link.\\n- -Wl,--gc-sections: recycles unused sections during linking.\\n\\nThe gcc version used in this example is V2.6.1, you can use the following command to check:\\n```bash\\nriscv64-unknown-linux-gnu-gcc -v\\n```\\n\\n## 3 Simulate\\nAfter the compilation is complete, use T-Head\'s qemu simulation program to execute, and you can see the top5 execution results on the terminal:\\n```bash\\nqemu-riscv64 -cpu  rv64,x-v=true,vext_spec=v1.0,vlen=128,x-matrix=on,mlen=128 c_runtime model.params data.0.bin\\n```\\n![image.png](https://intranetproxy.alipay.com/skylark/lark/0/2023/png/330274/1675153172385-5bf1da34-1ba2-4549-9620-f266e733660c.png#clientId=ua527e72f-b31b-4&from=paste&height=407&id=KD9lI&name=image.png&originHeight=488&originWidth=1291&originalType=binary&ratio=1&rotation=0&showTitle=false&size=215314&status=done&style=none&taskId=u50db042f-2f84-4107-9d4f-6a137e9b30c&title=&width=1075.8332905835593)\\nThe qemu version used in this example is V6.0.94, you can use the following command to check:\\n```bash\\nqemu-riscv64 -version\\n```\\n\\n## 4 Other\\nRISC-V matrix extension also supports fp16 data type, just modify the hhb compilation command as follows, and keep other steps unchanged, you can use fp16 for inference.\\n```bash\\nhhb -C --calibrate-dataset ./cat.jpg --model-file ./mobilenetv1.prototxt ./mobilenetv1.caffemodel \\n--data-scale 0.017 --data-mean \'104 117 124\' --output . --board rvm --quantization-scheme=\\"float16\\" \\n--pixel-format BGR --target-layout NHWC\\n```"},{"id":"deploy on th1520","metadata":{"permalink":"/zh/blog/deploy on th1520","editUrl":"https://github.com/alibaba-open-source-website/easyexcel/tree/main/blog/2023-01-11-deploy-on-th1520/index.md","source":"@site/blog/2023-01-11-deploy-on-th1520/index.md","title":"How to Deploy a Neural Network on TH1520","description":"Introduction","date":"2023-01-11T00:00:00.000Z","formattedDate":"2023\u5e741\u670811\u65e5","tags":[{"label":"TH1520","permalink":"/zh/blog/tags/th-1520"},{"label":"C910","permalink":"/zh/blog/tags/c-910"},{"label":"NPU","permalink":"/zh/blog/tags/npu"},{"label":"Wujian600","permalink":"/zh/blog/tags/wujian-600"}],"readingTime":6.065,"hasTruncateMarker":false,"authors":[{"name":"Wenmeng Zhang","title":"Engineer @ T-Head","url":"https://github.com/zhangwm-pt","imageURL":"https://github.com/zhangwm-pt.png","key":"zhangwm"}],"frontMatter":{"slug":"deploy on th1520","title":"How to Deploy a Neural Network on TH1520","authors":"zhangwm","tags":["TH1520","C910","NPU","Wujian600"]},"prevItem":{"title":"RISC-V matrix extension example","permalink":"/zh/blog/RVM example"},"nextItem":{"title":"XuanTie C908 Accelerates AI with Software and Hardware Fusion","permalink":"/zh/blog/C908 accelerates AI"}},"content":"## Introduction\\n\\nT-Head has recently introduced a high-performance SoC prototyping, i.e. TH1520, which is built on the Wujian600 chip development platform. With a quad-core XuanTie C910 CPU withbuilt-in 4-TOPS NPU, TH1520 engenders a new combination of CPU and AI computing. \\n\\nIn this blog, we will describe the process of how to deploy a neural network model on C910 and on C910 and NPU simultaneously.\\n\\n## Tools\\n\\nT-Head offers two open-source deployment tools that enable seamless, highly efficient integration of NN frameworks and underlying hardware:\\n\\n* Heterogeneous Honey Badge)(HHB): It supports models from different NN frameworks, and provides quantization and graph optimization.\\n* Structure of Heterogeneous Library (SHL): It is a common interface that is compatible with all hardware types, whil offering a reference schedule that facilitates software portability.\\n\\n![Tool flow](./ali135.png)\\n\\n### HHB\\n\\n[HHB](https://www.xrvm.com/tool-details?id=4056748601592913921#Download) is a collection of tools provided by T-Head to deploy neural network models on XuanTie processors. These tools can be incorporated for compilation, profiling, and simulation. \\n\\nIts framework is based on Apache TVM, which is an end-to-end machine learning compiler structure. We have shared the source code on [GitHub](https://github.com/T-head-Semi/tvm).\\n\\nHHB supports models such as Caffe, TensorFlow, ONNX, and TensorFlow Lite. It can convert these models into unified intermediate expressions for graphing performance optimization.\\n\\nIn addition, HHB supports multiple quantization methods to handle various data types. This framework can automatically provide the optimal scheme for the specified XuanTie CPU platform. After quantization, HHB generates a graph structure in C code from the intermediate expression. Each node of the graph structure is constructed by calling the CSI-NN2 API.\\n\\nHere is an example to use HHB in deploying MobileNet model on TH1520. The sample code shows the hhb command to compile the model:\\n\\n``` shell\\nhhb -C --board light --calibrate-dataset ./cat.jpg --model-file ./mobilenetv1.prototxt ./mobilenetv1.caffemodel --data-mean \\"103.94 116.98 123.68\\" --data-scale 0.007843 --output . --quantization-scheme=\\"int8_asym\\" --pixel-format BGR\\n```\\n\\nThe following content describes the parameter options:\\n\\n* C: specifies to execute the main command until C code is generated.\\n* board: emphasizes as the destination platform; light is an alias of TH1520.\\n* calibrate-dataset: specifies the calibration image used for quantization.\\n* model-file: specifies a MobileNet model downloaded to the current directory. A Caffe model is divided into two files. The files following the option are not sequence-sensitive.\\n* data-mean: defines a mean.\\n* data-scale: defines a scale.\\n* output: describes the current directory as the path to store files that you need to generate.\\n* quantization-scheme: identifies a quantization scheme. \\n* pixel-format: identifies the input image format required by the model training.\\n\\nAfter the command is executed, multiple files such as main.c and model.c are generated in the current directory:\\n\\n* main.c: the reference entry to the sample program.\\n* model.c: a model structure file that describes the model.\\n* hhb.hm: the weights converted to int8.\\n* io.c: the helper function for reading and writing files.\\n* io.h: the declaration of the helper function for above files.\\n* process.c: the image preprocessing function.\\n* process.h: the declaration of the above function.\\n\\nAfter the HHB command generates code, the gcc command performs binary encoding.\\n\\n``` shell\\nriscv64-unknown-linux-gnu-gcc -O0 -g3 -march=rv64gcv0p7_zfh_xtheadc -mabi=lp64d -I/home -I/home/install_nn2/include -I/home/decode/install/include -o c_runtime  main.c model.c io.c process.c -L/home/install_nn2/lib -L/home/decode/install/lib/rv -ljpeg -lpng -lz -lstdc++ -lshl_rvv -lm -static -Wl,--gc-sections\\n```\\n\\nThe following content describes the parameter options:\\n\\n* O0 -g3: specifies the optimization option. In this example, you can use the debug-level O0 only.\\n* march: identifies the architecture option for C910.\\n* mabi: identifies the application binary interface (ABI) option for C910.\\n* I: describes the location of the header file that is used during compilation.\\n* o: describes the name of the executable file needed to generate.\\n* main.c model.c io.c process.c: the source file yu for compilation.\\n* L: specifies the path to store the specified library.\\n* ljpeg: links to a JPEG decoding library.\\n* lpng: links to a PNG decoding library.\\n* lz: links to a zlib.\\n* lstdc++: links to a standard C++ library.\\n* lshl_rvv: links to an optimized version library of C910 in SHL.\\n* lm: links to a standard math library.\\n* static: a static link.\\n* Wl,\u2013gc-sections: recycles unused sections during linking.\\n\\nAfter the compilation is complete, the c_runtime file is created under the current directory. Copy the hhb.bm file and the cat.jpg image that are generated by incorporating the hhb command and the c_runtime file to the development board of C910 to execute at a time:\\n\\n``` shell\\n./c_runtime hhb.bm cat.jpg\\n```\\n\\nYou can view the top 5 execution results on the terminal. \\n\\n### SHL\\n\\nSHL, previously called CSI-NN2,  is a neural network acceleration library.\\n\\nIt abstracts various common neural network operators to form unified interfaces. SHL also implements an acceleration library for XuanTie CPU. This interface offers optimization code at the assembly level for the RISC-V Vector extension. The acceleration library has adapted to multiple data types of quantization schemes.\\n\\nCombined with the automatic quantization function of HHB, SHL can quickly change the original model from the single-precision floating-point data type to optimal. As a result,the model can deliver the best performance on the development board.\\n\\nThe source code of SHL has been made available on [GitHub](https://github.com/T-head-Semi/csi-nn2).\\n\\nSHL shares the specifications of RISCV-V Vector extension V0.7.1 in the implementation of the neural network operator on XuanTie C910. Considering the features of the CPU hardware (such as pipeline dependence, branch prediction, or cache), SHL fully excavates the parallel capabilities of the fp16 data format in the algorithm.\\n\\nTo balance performance and accuracy, some SoCs may have an NPU to accelerate some int8 neural network operators. SHL provides one reference schedule module to find the best processor for  operators.\\n\\n![graph opt](./ali136.png)\\n\\n## C910 Performance\\n\\nXuanTie C910 is a 64-bit high-performance processor based on the 64-bit RISC-V architecture. This processor adopts a state-of-the-art 12-stage and out-of-order multiple issue superscalar pipeline. On TH1520, it can clock up to 2.5GHz. It is also equipped with 128-bit vector operation units to deliver optimized performance. \\n\\nThe vector operation units of XuanTie C910 are designed following version 0.7.1 of RISC-V Vector Extension. C910 supports wide-ranging data formats, including int8, int16, int32, int64, bf16, fp16, fp32, and fp64. fp16 is the default format for deploying network models, with which Xuantie C910 can achieve its best performance.\\n\\nWe have tested various typical image classification models. The table below presents the performance of our deployment software on C910 at 1.85 GHz.\\n\\n![c910 perf](./ali138.png)\\n\\nAs a comparison, [XNNPACK](https://github.com/google/XNNPACK) costs 77ms (multi-threaded) to infer a MobileNet model on Raspberry Pi 4B.\\n\\n## C910 and NPU\\n\\nIn order to accelerate the convolution operator in the neural network, TH1520 is equipped with a 4-TOPS NPU. The NPU can also expedite more than 20 other operators in the neural network under int8.\\n\\nThe table below presents the performance of combining C910 and NPU to access typical image classification models:\\n\\n![npu perf](./ali139.png)\\n\\n## Conclusion\\n\\nThis article describes in details on how to deploy a neural network model on TH1520, We have also presented optimal performance of TH1520 in basic image classification tasks.\\n\\nTH1520 has already been incorporated inside Alibaba\u2019s ecosystem, which demonstrates the feasibility of RISC-V-based high-performance devices to deploy neural network models. In addition, the source code of deployment tools, HHB and SHL, has been open-sourced and shared on GitHub.\\n\\n[Read more details related to the hardware and software.](https://www.xrvm.com/)"},{"id":"C908 accelerates AI","metadata":{"permalink":"/zh/blog/C908 accelerates AI","editUrl":"https://github.com/alibaba-open-source-website/easyexcel/tree/main/blog/2022-12-20-c908-accelerate/index.md","source":"@site/blog/2022-12-20-c908-accelerate/index.md","title":"XuanTie C908 Accelerates AI with Software and Hardware Fusion","description":"1. Introduction","date":"2022-12-20T00:00:00.000Z","formattedDate":"2022\u5e7412\u670820\u65e5","tags":[{"label":"C908","permalink":"/zh/blog/tags/c-908"},{"label":"Hardware","permalink":"/zh/blog/tags/hardware"}],"readingTime":3.675,"hasTruncateMarker":false,"authors":[{"name":"Wengan Shao","title":"Engineer @ T-Head","url":"https://github.com/shaowg","imageURL":"https://github.com/shaowg.png","key":"shaowg"}],"frontMatter":{"slug":"C908 accelerates AI","title":"XuanTie C908 Accelerates AI with Software and Hardware Fusion","authors":"shaowg","tags":["C908","Hardware"]},"prevItem":{"title":"How to Deploy a Neural Network on TH1520","permalink":"/zh/blog/deploy on th1520"},"nextItem":{"title":"XuanTie C906 Tops MLPerf Tiny v0.7 Benchmark","permalink":"/zh/blog/MLPerf Tiny"}},"content":"## 1. Introduction\\n\\n[XuanTie C908](https://xrvm.com/?spm=a2cl5.27298783.0.0.6618272dxfNBdQ) is the latest RISC-V processor released by T-Head Semiconductor, It has a frequency of up to 2 GHz. which allows it to be widely used in visual AI, intelligent interaction, and other advanced technologies. This article focuses on an array of topics from processor micro-architecture, to convolution acceleration algorithm, to optimized operators for XuanTie C908. We are also showcasing the AI inference performance of XuanTie C908 by using the T-Head open source AI deployment kit for the first time.\\n\\n## 2. AI acceleration of hardware and software integration\\n\\n### 2.1 Processor micro-architecture\\n\\n* Support instruction fusion technology\\n* Compliant with RISC-V vector extension 1.0\\n* Support 128/256 configurable vector register bit width VLEN\\n* The vector execution unit supports FP16/BFP16/FP32 floating point and INT8/INT32/INT64 integer operations\\n* Support INT8/INT4 vector dot product operations.\\n\\n### 2.2 Software algorithm optimization\\nStructure of Heterogeneous Library (SHL) is a set of neural network library APIs for XuanTie CPU platform. It abstracts common neural network operator interfaces. For the newly released XuanTie C908, SHL provides the inference acceleration of multiple data types (fp32/fp16/int8). Combined with the processor pipeline, instruction fusion, and high-speed cache technology, it offers deep assembly optimization for core operators in neural networks.\\n\\nConvolution has been the most crucial operator in CNN models. Currently, im2col + GEMM and Winograd are supported in SHL to accelerate convolution calculations. The main steps of Winograd are:\\n\\n* Input padding\\n* Input transformation\\n* Input reordering\\n* Batch GEMM operations\\n* Output transformation\\n* Output cropping\\n\\nThe core computing of the two algorithms is gemm. The following figure uses vlen128/fp16 as an example to show the calculation process of gemm.\\n\\n![im1](./image1.png)\\n\\nVector load (vle) is used for weight data, while scalar load (flh) for input data. This design takes 16*12 register blocks to improve computational efficiency by performing outer product matrix. We manually remove read-after-write and write-after-write data dependencies to adjust instruction flow. Last but not least, we have incorporated advanced instruction fusion technology to fully optimize performance of XuanTie C908. (The arrows in the figure indicate the arrangement order of the data in the memory.)\\n\\nThe list of optimized operators supported by SHL for XuanTie C908 is as follows:\\n\\n* conv2d\\n* depthwiseconv2d\\n* maxpool2d\\n* avgpool2d\\n* global_maxpool2d\\n* global_avgpool2d\\n* fullyconnected\\n* relu\\n* relu6\\n* leaky_relu\\n* prelu\\n* sigmoid\\n* softmax\\n* concat\\n* pad\\n* elementwise_add\\n* elementwise_mul\\n* sum\\n\\n## 2.3 Model deployment\\n\\nHeterogenous Honey Badger (HHB) has been adapted to the latest XuanTie C908 processor. It supports weight symmetric, activation asymmetric int8 data type quantization and fp16 data type quantization. One only needs a simple command to generate the C code model file for inference on XuanTie C908. While calling on the SHL XuanTie C908 high-performance inference computing library, you can achieve the best performance experience of model inference on XuanTie C908.\\n\\n``` shell\\nhhb -C \u2013calibrate-dataset ./cat.jpg \u2013model-file ./mobilenetv1.prototxt ./mobilenetv1.caffemodel \u2013data-scale 0.017 \u2013data-mean \u2018104 117 124\u2019 \u2013output . \u2013board c908 \u2013quantization-scheme=\u201dint8_asym_w_sym\u201d \u2013pixel-format BGR \u2013fuse-conv-relu \u2013channel-quantization\\n```\\n\\n## 3. Performance\\n\\nWe tested the AI inference performance of some common CNN models on XuanTie C908 using HHB and SHL. After adding the int8 vector dot product instruction, we improved XuanTie C908 performance by 3.35 times on mobilenet. This step enables us to expand the vector length to 256 results in a speedup ratio of 1.55 to 1.68. The AI performance provided by XuanTie C908 (@vlen128) has been increased by 3.75 to 4.57 times compared with that of the previous generation XuanTie C906 (@D1).\\n\\n### 3.1 Vector dot product extension\\n\\n![im2](./image2.png)\\n\\n### 3.2 Vlen256 and vlen128\\n\\n![im3](./image3.png)\\n\\n### 3.3 XuanTie C908 and XuanTie C906\\n\\n![im4](./image4.png)\\n\\n## 4. Conclusion\\n\\nXuanTie C908 greatly improves AI computing power and performance. We have followed the standard RISC-V vector extension 1.0 and supported int8/int4 vector dot product extensions. Thus, we have provided 256-bit wide vector register configurable options for Xuantie C908. This article describes the specific steps of integration with micro-architecture and instruction characteristics of the XuanTie C908 processor. By doing so, we are able to accelerate the convolution operator in CNN and introduces the SHL high-performance computing library GEMM optimization ideas and the list of optimized operators. Moreover, we have compared the AI performance of XuanTie C908 and the previous generation XuanTie C906, further highlighting the potential and advantages of the RISIC-V processor architecture in the field of AIOT through software and hardware joint optimization."},{"id":"MLPerf Tiny","metadata":{"permalink":"/zh/blog/MLPerf Tiny","editUrl":"https://github.com/alibaba-open-source-website/easyexcel/tree/main/blog/2022-06-13-mlperf-tiny/index.md","source":"@site/blog/2022-06-13-mlperf-tiny/index.md","title":"XuanTie C906 Tops MLPerf Tiny v0.7 Benchmark","description":"XuanTie C906 is a processor developed by Alibaba Cloud based on the RISC-V instruction set architecture. It has attained top marks in the most recent findings from MLPerf Tiny v0.7, an AI benchmark focusing on IoT devices. The performance of XuanTie C906 excelled in all four core categories: Visual Wake Words (VWW), Image Classifications (IC), Keyword Spotting (KWS), and Anomaly Detection (AD).","date":"2022-06-13T00:00:00.000Z","formattedDate":"2022\u5e746\u670813\u65e5","tags":[{"label":"D1","permalink":"/zh/blog/tags/d-1"},{"label":"C906","permalink":"/zh/blog/tags/c-906"}],"readingTime":4.195,"hasTruncateMarker":false,"authors":[{"name":"Wenmeng Zhang","title":"Engineer @ T-Head","url":"https://github.com/zhangwm-pt","imageURL":"https://github.com/zhangwm-pt.png","key":"zhangwm"}],"frontMatter":{"slug":"MLPerf Tiny","title":"XuanTie C906 Tops MLPerf Tiny v0.7 Benchmark","authors":"zhangwm","tags":["D1","C906"]},"prevItem":{"title":"XuanTie C908 Accelerates AI with Software and Hardware Fusion","permalink":"/zh/blog/C908 accelerates AI"}},"content":"XuanTie C906 is a processor developed by Alibaba Cloud based on the RISC-V instruction set architecture. It has attained top marks in the most recent findings from [MLPerf Tiny v0.7](https://mlcommons.org/en/inference-tiny-07/), an AI benchmark focusing on IoT devices. The performance of XuanTie C906 excelled in all four core categories: Visual Wake Words (VWW), Image Classifications (IC), Keyword Spotting (KWS), and Anomaly Detection (AD).\\n\\n## About MLPerf Tiny\\n\\nMLPerf Tiny Inference is a benchmark developed by MLCommons. It is designed to measure the efficiency of processing new data by a trained neural network for extremely low-power devices., as well as providing an optional power measurement test.\\n\\nThe benchmark consists of four machine learning tasks that involve using microphone and camera sensors within embedded devices<sup>1</sup>:\\n\\n* Keyword Spotting (KWS):  a feature that utilizes a neural network to detect keywords from a spectrogram\\n* Visual Wake Words (VWW): a binary image classification task to determine the presence of a person in an image\\n* Tiny Image Classification (IC):  a small image classification benchmark with 10 classes\\n* Anomaly Detection (AD): uses a neural network to identify abnormalities in machine operating sounds\\n\\nThe image below details the results.\\n\\n![res](./ali1-1.png)\\n\\n## XuanTie C906 with the RISC-V Vector Extension\\n\\nXuanTie C906 is a 64-bit high-energy processor based on a 64-bit RISC-V architecture. This processor is designed with a five to eight stage integer pipeline. It is also equipped with 128-bit vector operation units to deliver excellent performance. Not only does XuanTie C906 adopt a multi-channel and mode data prefetching technologies, it improves and optimizes data access bandwidth and prefetching.\\n\\nThe vector operation units of XuanTie C906 are designed to follow the specifications of RISC-V Vector extension V0.7.1. Data formats, including int8, int16, int32, int64, bf16, fp16, fp32, and fp64, are supported. In the benchmark we have used f16 as the default, with which Xuantie C906 achieved the best performance.\\n\\nThe XuanTie C906 silicon chip is used in Allwinner SoC D1, which has been put into full-scale production. Allwinner D1 has been embedded in various development boards and is available in the open market.\\n\\n## Software Stack\\n\\n![stack](./ali2.png)\\n\\nAs shown in the preceding flowchart, the original model is obtained from MLPerf Tiny. An optional next step is to then be compressed by Sinian. Subsequently, Heterogeneous Honey Badger (HHB) converts the model to function library calls which are supported by the CSI-NN2 API. CSI-NN2 finally implements neural network interfaces by using the vector operation units of XuanTie C906.\\n\\n### CSI-NN2\\n\\nCSI-NN2 is a set of API interfaces for neural network acceleration libraries. It abstracts various common neural network operators to form unified interfaces.\\n\\nCSI-NN2 also implements an acceleration library for XuanTie CPU. This interface provides optimization code at the assembly level for the RISC-V Vector extension. The acceleration library has adapted to multiple data types of quantization schemes.\\n\\nCombined with the automatic quantization function of HHB, CSI-NN2 can quickly change the original model from the single-precision floating-point data type to optimal so that the model can deliver the best performance on the development board.\\n\\nThe source code of CSI-NN2 has been made available on [GitHub](https://github.com/T-head-Semi/csi-nn2).\\n\\nCSI-NN2 shares the specifications of RISCV-V Vector extension V0.7.1 in the implementation of neural network operator on XuanTie C906. Considering the features of the CPU hardware (such as pipeline dependence, branch prediction, or cache), CSI-NN2 fully excavates the parallel capabilities of the fp16 data format in the algorithm.\\n\\n### HHB\\n\\nHHB is a collection of tools provided by T-Head to deploy neural network models on XuanTie processors. These tools can be incorporated for compilation, profiling, and simulation. The framework is based on Apache TVM, which is an end-to-end machine learning compiler structure. \\n\\nThe source code of HHB has been shared on [GitHub](https://github.com/T-head-Semi/tvm).\\n\\nHHB supports the network model formats of Caffe, TensorFlow, ONNX, and TensorFlow Lite. It can convert these model formats into unified intermediate expressions for graphing performance optimization. \\n\\nIn addition, HHB supports multiple quantization methods to handle various data types. This framework can automatically provide the optimal  scheme for the specified XuanTie CPU platform. After quantization, HHB generates a graph structure in C code from the intermediate expression. Each node of the graph structure is constructed by calling the CSI-NN2 API.\\n\\nAs a common deployment tool set, HHB can also access the original model in the benchmark with the following performance:\\n\\n![perf](./ali3.png)\\n\\n### Sinian\\nSinian is a computing acceleration platform for neural network models. It utilizes technologies for model compression such as network structure search and knowledge distillation.\\n\\nIn the benchmark, Sinian has reduced the calculation workload of every model by three to eight times.\\n\\n## Conclusion\\n\\nThis article describes the results the XuanTie C906 attained in the MLPerf Tiny v0.7 benchmark in terms of performance. XuanTie C906 implements the specifications of RISC-V Vector extension V0.7.1. It has been put into scale production and is available on [AliExpress](https://sipeed.aliexpress.com/store/group/RISC-V/1101739727_10000003584258.html?spm=a2g0o.store_pc_home.smartGrouping_6001928813303.10000003584258). In addition, the source code of CSI-NN2 and HHB have been open sourced and shared on GitHub.\\n\\n[Read more details related to the hardware and software.](https://occ.t-head.cn/)\\n\\n \\nReferences:\\n[1] MLPerf Tiny Inference Benchmark. from: https://mlcommons.org/en/news/mlperf-tiny-v05/"}]}')}}]);