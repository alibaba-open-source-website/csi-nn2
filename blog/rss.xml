<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/">
    <channel>
        <title>SHL Blog</title>
        <link>https://csi-nn2.opensource.alibaba.com/blog</link>
        <description>SHL Blog</description>
        <lastBuildDate>Wed, 11 Jan 2023 00:00:00 GMT</lastBuildDate>
        <docs>https://validator.w3.org/feed/docs/rss2.html</docs>
        <generator>https://github.com/jpmonette/feed</generator>
        <language>en</language>
        <item>
            <title><![CDATA[How to Deploy a Neural Network on TH1520]]></title>
            <link>https://csi-nn2.opensource.alibaba.com/blog/deploy on th1520</link>
            <guid>deploy on th1520</guid>
            <pubDate>Wed, 11 Jan 2023 00:00:00 GMT</pubDate>
            <description><![CDATA[T-Head has recently introduced a high-performance SoC prototyping, i.e. TH1520, which is built on the Wujian600 chip development platform. With a quad-core XuanTie C910 CPU withbuilt-in 4-TOPS NPU, TH1520 engenders a new combination of CPU and AI computing.]]></description>
            <content:encoded><![CDATA[<p>T-Head has recently introduced a high-performance SoC prototyping, i.e. TH1520, which is built on the Wujian600 chip development platform. With a quad-core XuanTie C910 CPU withbuilt-in 4-TOPS NPU, TH1520 engenders a new combination of CPU and AI computing. </p><p>In this blog, we will describe the process of how to deploy a neural network model on C910 and on C910 and NPU simultaneously.</p><h1>Tools</h1><p>T-Head offers two open-source deployment tools that enable seamless, highly efficient integration of NN frameworks and underlying hardware:</p><ul><li>Heterogeneous Honey Badge)(HHB): It supports models from different NN frameworks, and provides quantization and graph optimization.</li><li>Structure of Heterogeneous Library (SHL): It is a common interface that is compatible with all hardware types, whil offering a reference schedule that facilitates software portability.</li></ul><p><img loading="lazy" alt="Tool flow" src="/assets/images/ali135-b3fcec4e8dbd3972a20aafcc21b3cde0.png" width="880" height="524" class="img_ev3q"></p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="hhb">HHB<a class="hash-link" href="#hhb" title="Direct link to heading">​</a></h2><p><a href="https://www.xrvm.com/tool-details?id=4056748601592913921#Download" target="_blank" rel="noopener noreferrer">HHB</a> is a collection of tools provided by T-Head to deploy neural network models on XuanTie processors. These tools can be incorporated for compilation, profiling, and simulation. </p><p>Its framework is based on Apache TVM, which is an end-to-end machine learning compiler structure. We have shared the source code on <a href="https://github.com/T-head-Semi/tvm" target="_blank" rel="noopener noreferrer">GitHub</a>.</p><p>HHB supports models such as Caffe, TensorFlow, ONNX, and TensorFlow Lite. It can convert these models into unified intermediate expressions for graphing performance optimization.</p><p>In addition, HHB supports multiple quantization methods to handle various data types. This framework can automatically provide the optimal scheme for the specified XuanTie CPU platform. After quantization, HHB generates a graph structure in C code from the intermediate expression. Each node of the graph structure is constructed by calling the CSI-NN2 API.</p><p>Here is an example to use HHB in deploying MobileNet model on TH1520. The sample code shows the hhb command to compile the model:</p><div class="language-shell codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-shell codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">hhb -C --board light --calibrate-dataset ./cat.jpg --model-file ./mobilenetv1.prototxt ./mobilenetv1.caffemodel --data-mean </span><span class="token string" style="color:#e3116c">"103.94 116.98 123.68"</span><span class="token plain"> --data-scale </span><span class="token number" style="color:#36acaa">0.007843</span><span class="token plain"> --output </span><span class="token builtin class-name">.</span><span class="token plain"> --quantization-scheme</span><span class="token operator" style="color:#393A34">=</span><span class="token string" style="color:#e3116c">"int8_asym"</span><span class="token plain"> --pixel-format BGR</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>The following content describes the parameter options:</p><ul><li>C: specifies to execute the main command until C code is generated.</li><li>board: emphasizes as the destination platform; light is an alias of TH1520.</li><li>calibrate-dataset: specifies the calibration image used for quantization.</li><li>model-file: specifies a MobileNet model downloaded to the current directory. A Caffe model is divided into two files. The files following the option are not sequence-sensitive.</li><li>data-mean: defines a mean.</li><li>data-scale: defines a scale.</li><li>output: describes the current directory as the path to store files that you need to generate.</li><li>quantization-scheme: identifies a quantization scheme. </li><li>pixel-format: identifies the input image format required by the model training.</li></ul><p>After the command is executed, multiple files such as main.c and model.c are generated in the current directory:</p><ul><li>main.c: the reference entry to the sample program.</li><li>model.c: a model structure file that describes the model.</li><li>hhb.hm: the weights converted to int8.</li><li>io.c: the helper function for reading and writing files.</li><li>io.h: the declaration of the helper function for above files.</li><li>process.c: the image preprocessing function.</li><li>process.h: the declaration of the above function.</li></ul><p>After the HHB command generates code, the gcc command performs binary encoding.</p><div class="language-shell codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-shell codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">riscv64-unknown-linux-gnu-gcc -O0 -g3 -march</span><span class="token operator" style="color:#393A34">=</span><span class="token plain">rv64gcv0p7_zfh_xtheadc -mabi</span><span class="token operator" style="color:#393A34">=</span><span class="token plain">lp64d -I/home -I/home/install_nn2/include -I/home/decode/install/include -o c_runtime  main.c model.c io.c process.c -L/home/install_nn2/lib -L/home/decode/install/lib/rv -ljpeg -lpng -lz -lstdc++ -lshl_rvv -lm -static -Wl,--gc-sections</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>The following content describes the parameter options:</p><ul><li>O0 -g3: specifies the optimization option. In this example, you can use the debug-level O0 only.</li><li>march: identifies the architecture option for C910.</li><li>mabi: identifies the application binary interface (ABI) option for C910.</li><li>I: describes the location of the header file that is used during compilation.</li><li>o: describes the name of the executable file needed to generate.</li><li>main.c model.c io.c process.c: the source file yu for compilation.</li><li>L: specifies the path to store the specified library.</li><li>ljpeg: links to a JPEG decoding library.</li><li>lpng: links to a PNG decoding library.</li><li>lz: links to a zlib.</li><li>lstdc++: links to a standard C++ library.</li><li>lshl_rvv: links to an optimized version library of C910 in SHL.</li><li>lm: links to a standard math library.</li><li>static: a static link.</li><li>Wl,–gc-sections: recycles unused sections during linking.</li></ul><p>After the compilation is complete, the c_runtime file is created under the current directory. Copy the hhb.bm file and the cat.jpg image that are generated by incorporating the hhb command and the c_runtime file to the development board of C910 to execute at a time:</p><div class="language-shell codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-shell codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">./c_runtime hhb.bm cat.jpg</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>You can view the top 5 execution results on the terminal. </p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="shl">SHL<a class="hash-link" href="#shl" title="Direct link to heading">​</a></h2><p>SHL, previously called CSI-NN2,  is a neural network acceleration library.</p><p>It abstracts various common neural network operators to form unified interfaces. SHL also implements an acceleration library for XuanTie CPU. This interface offers optimization code at the assembly level for the RISC-V Vector extension. The acceleration library has adapted to multiple data types of quantization schemes.</p><p>Combined with the automatic quantization function of HHB, SHL can quickly change the original model from the single-precision floating-point data type to optimal. As a result,the model can deliver the best performance on the development board.</p><p>The source code of SHL has been made available on <a href="https://github.com/T-head-Semi/csi-nn2" target="_blank" rel="noopener noreferrer">GitHub</a>.</p><p>SHL shares the specifications of RISCV-V Vector extension V0.7.1 in the implementation of the neural network operator on XuanTie C910. Considering the features of the CPU hardware (such as pipeline dependence, branch prediction, or cache), SHL fully excavates the parallel capabilities of the fp16 data format in the algorithm.</p><p>To balance performance and accuracy, some SoCs may have an NPU to accelerate some int8 neural network operators. SHL provides one reference schedule module to find the best processor for  operators.</p><p><img loading="lazy" alt="graph opt" src="/assets/images/ali136-73a2f322deb96fd8df1252539baab274.png" width="1202" height="610" class="img_ev3q"></p><h1>C910 Performance</h1><p>XuanTie C910 is a 64-bit high-performance processor based on the 64-bit RISC-V architecture. This processor adopts a state-of-the-art 12-stage and out-of-order multiple issue superscalar pipeline. On TH1520, it can clock up to 2.5GHz. It is also equipped with 128-bit vector operation units to deliver optimized performance. </p><p>The vector operation units of XuanTie C910 are designed following version 0.7.1 of RISC-V Vector Extension. C910 supports wide-ranging data formats, including int8, int16, int32, int64, bf16, fp16, fp32, and fp64. fp16 is the default format for deploying network models, with which Xuantie C910 can achieve its best performance.</p><p>We have tested various typical image classification models. The table below presents the performance of our deployment software on C910 at 1.85 GHz.</p><p><img loading="lazy" alt="c910 perf" src="/assets/images/ali138-2ba85047243dc356868ada350815adcd.png" width="1238" height="406" class="img_ev3q"></p><p>As a comparison, <a href="https://github.com/google/XNNPACK" target="_blank" rel="noopener noreferrer">XNNPACK</a> costs 77ms (multi-threaded) to infer a MobileNet model on Raspberry Pi 4B.</p><h1>C910 and NPU</h1><p>In order to accelerate the convolution operator in the neural network, TH1520 is equipped with a 4-TOPS NPU. The NPU can also expedite more than 20 other operators in the neural network under int8.</p><p>The table below presents the performance of combining C910 and NPU to access typical image classification models:</p><p><img loading="lazy" alt="npu perf" src="/assets/images/ali139-ee83d8b897492361bbc070ea55945ac9.png" width="1178" height="320" class="img_ev3q"></p><h1>Conclusion</h1><p>This article describes in details on how to deploy a neural network model on TH1520, We have also presented optimal performance of TH1520 in basic image classification tasks.</p><p>TH1520 has already been incorporated inside Alibaba’s ecosystem, which demonstrates the feasibility of RISC-V-based high-performance devices to deploy neural network models. In addition, the source code of deployment tools, HHB and SHL, has been open-sourced and shared on GitHub.</p><p><a href="https://www.xrvm.com/" target="_blank" rel="noopener noreferrer">Read more details related to the hardware and software.</a></p>]]></content:encoded>
            <category>TH1520</category>
            <category>C910</category>
            <category>NPU</category>
            <category>Wujian600</category>
        </item>
        <item>
            <title><![CDATA[XuanTie C908 Accelerates AI with Software and Hardware Fusion]]></title>
            <link>https://csi-nn2.opensource.alibaba.com/blog/C908 accelerates AI</link>
            <guid>C908 accelerates AI</guid>
            <pubDate>Tue, 20 Dec 2022 00:00:00 GMT</pubDate>
            <description><![CDATA[XuanTie C908 is the latest RISC-V processor released by T-Head Semiconductor, It has a frequency of up to 2 GHz. which allows it to be widely used in visual AI, intelligent interaction, and other advanced technologies. This article focuses on an array of topics from processor micro-architecture, to convolution acceleration algorithm, to optimized operators for XuanTie C908. We are also showcasing the AI inference performance of XuanTie C908 by using the T-Head open source AI deployment kit for the first time.]]></description>
            <content:encoded><![CDATA[<p><a href="https://xrvm.com/?spm=a2cl5.27298783.0.0.6618272dxfNBdQ" target="_blank" rel="noopener noreferrer">XuanTie C908</a> is the latest RISC-V processor released by T-Head Semiconductor, It has a frequency of up to 2 GHz. which allows it to be widely used in visual AI, intelligent interaction, and other advanced technologies. This article focuses on an array of topics from processor micro-architecture, to convolution acceleration algorithm, to optimized operators for XuanTie C908. We are also showcasing the AI inference performance of XuanTie C908 by using the T-Head open source AI deployment kit for the first time.</p><h1>2. AI acceleration of hardware and software integration</h1><h2 class="anchor anchorWithStickyNavbar_LWe7" id="21-processor-micro-architecture">2.1 Processor micro-architecture<a class="hash-link" href="#21-processor-micro-architecture" title="Direct link to heading">​</a></h2><ul><li>Support instruction fusion technology</li><li>Compliant with RISC-V vector extension 1.0</li><li>Support 128/256 configurable vector register bit width VLEN</li><li>The vector execution unit supports FP16/BFP16/FP32 floating point and INT8/INT32/INT64 integer operations</li><li>Support INT8/INT4 vector dot product operations.</li></ul><h2 class="anchor anchorWithStickyNavbar_LWe7" id="22-software-algorithm-optimization">2.2 Software algorithm optimization<a class="hash-link" href="#22-software-algorithm-optimization" title="Direct link to heading">​</a></h2><p>Structure of Heterogeneous Library (SHL) is a set of neural network library APIs for XuanTie CPU platform. It abstracts common neural network operator interfaces. For the newly released XuanTie C908, SHL provides the inference acceleration of multiple data types (fp32/fp16/int8). Combined with the processor pipeline, instruction fusion, and high-speed cache technology, it offers deep assembly optimization for core operators in neural networks.</p><p>Convolution has been the most crucial operator in CNN models. Currently, im2col + GEMM and Winograd are supported in SHL to accelerate convolution calculations. The main steps of Winograd are:</p><ul><li>Input padding</li><li>Input transformation</li><li>Input reordering</li><li>Batch GEMM operations</li><li>Output transformation</li><li>Output cropping</li></ul><p>The core computing of the two algorithms is gemm. The following figure uses vlen128/fp16 as an example to show the calculation process of gemm.</p><p><img loading="lazy" alt="im1" src="/assets/images/image1-a6712ce9864380f64ee02799f82445d4.png" width="1544" height="753" class="img_ev3q"></p><p>Vector load (vle) is used for weight data, while scalar load (flh) for input data. This design takes 16*12 register blocks to improve computational efficiency by performing outer product matrix. We manually remove read-after-write and write-after-write data dependencies to adjust instruction flow. Last but not least, we have incorporated advanced instruction fusion technology to fully optimize performance of XuanTie C908. (The arrows in the figure indicate the arrangement order of the data in the memory.)</p><p>The list of optimized operators supported by SHL for XuanTie C908 is as follows:</p><ul><li>conv2d</li><li>depthwiseconv2d</li><li>maxpool2d</li><li>avgpool2d</li><li>global_maxpool2d</li><li>global_avgpool2d</li><li>fullyconnected</li><li>relu</li><li>relu6</li><li>leaky_relu</li><li>prelu</li><li>sigmoid</li><li>softmax</li><li>concat</li><li>pad</li><li>elementwise_add</li><li>elementwise_mul</li><li>sum</li></ul><h2 class="anchor anchorWithStickyNavbar_LWe7" id="23-model-deployment">2.3 Model deployment<a class="hash-link" href="#23-model-deployment" title="Direct link to heading">​</a></h2><p>Heterogenous Honey Badger (HHB) has been adapted to the latest XuanTie C908 processor. It supports weight symmetric, activation asymmetric int8 data type quantization and fp16 data type quantization. One only needs a simple command to generate the C code model file for inference on XuanTie C908. While calling on the SHL XuanTie C908 high-performance inference computing library, you can achieve the best performance experience of model inference on XuanTie C908.</p><div class="language-shell codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-shell codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">hhb -C –calibrate-dataset ./cat.jpg –model-file ./mobilenetv1.prototxt ./mobilenetv1.caffemodel –data-scale </span><span class="token number" style="color:#36acaa">0.017</span><span class="token plain"> –data-mean ‘104 </span><span class="token number" style="color:#36acaa">117</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">124</span><span class="token plain">’ –output </span><span class="token builtin class-name">.</span><span class="token plain"> –board c908 –quantization-scheme</span><span class="token operator" style="color:#393A34">=</span><span class="token plain">”int8_asym_w_sym” –pixel-format BGR –fuse-conv-relu –channel-quantization</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><h1>3. Performance</h1><p>We tested the AI inference performance of some common CNN models on XuanTie C908 using HHB and SHL. After adding the int8 vector dot product instruction, we improved XuanTie C908 performance by 3.35 times on mobilenet. This step enables us to expand the vector length to 256 results in a speedup ratio of 1.55 to 1.68. The AI performance provided by XuanTie C908 (@vlen128) has been increased by 3.75 to 4.57 times compared with that of the previous generation XuanTie C906 (@D1).</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="31-vector-dot-product-extension">3.1 Vector dot product extension<a class="hash-link" href="#31-vector-dot-product-extension" title="Direct link to heading">​</a></h2><p><img loading="lazy" alt="im2" src="/assets/images/image2-2889b0a2867be573e6c92bde2652cef2.png" width="633" height="421" class="img_ev3q"></p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="32-vlen256-and-vlen128">3.2 Vlen256 and vlen128<a class="hash-link" href="#32-vlen256-and-vlen128" title="Direct link to heading">​</a></h2><p><img loading="lazy" alt="im3" src="/assets/images/image3-688daf53a1f0e7ece62a219e7d6361c4.png" width="606" height="408" class="img_ev3q"></p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="33-xuantie-c908-and-xuantie-c906">3.3 XuanTie C908 and XuanTie C906<a class="hash-link" href="#33-xuantie-c908-and-xuantie-c906" title="Direct link to heading">​</a></h2><p><img loading="lazy" alt="im4" src="/assets/images/image4-cbb81c159bd691048bd25a39b6894c18.png" width="600" height="360" class="img_ev3q"></p><h1>4. Conclusion</h1><p>XuanTie C908 greatly improves AI computing power and performance. We have followed the standard RISC-V vector extension 1.0 and supported int8/int4 vector dot product extensions. Thus, we have provided 256-bit wide vector register configurable options for Xuantie C908. This article describes the specific steps of integration with micro-architecture and instruction characteristics of the XuanTie C908 processor. By doing so, we are able to accelerate the convolution operator in CNN and introduces the SHL high-performance computing library GEMM optimization ideas and the list of optimized operators. Moreover, we have compared the AI performance of XuanTie C908 and the previous generation XuanTie C906, further highlighting the potential and advantages of the RISIC-V processor architecture in the field of AIOT through software and hardware joint optimization.</p>]]></content:encoded>
            <category>C908</category>
            <category>Hardware</category>
        </item>
    </channel>
</rss>